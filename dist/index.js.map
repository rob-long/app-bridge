{"version":3,"file":"index.js","sources":["../src/AppBridge.ts","../src/AppBridgeService.ts","../src/useAppBridge.ts"],"sourcesContent":["import { BehaviorSubject, Subscription } from 'rxjs';\n\n/**\n * Interface representing a collection of BehaviorSubject instances.\n *\n * @template T - The type of the values managed by the BehaviorSubjects.\n */\nexport type SubjectEntries<T> = {\n  [K in SubjectKey<T>]: BehaviorSubject<T[K] | null>;\n};\n\n/**\n * Interface extending the Window object to include a subject manager.\n *\n * @template T - The type of the values managed by the subject manager.\n */\nexport interface WindowWithSubjectManager<T> extends Window {\n  _subjectManager: SubjectEntries<T>;\n}\n\n/**\n * Options for configuring the AppBridge instance.\n */\nexport interface AppBridgeOptions {\n  /**\n   * If true, resets the AppBridge instance.\n   */\n  reset?: boolean;\n}\n\ndeclare const window: WindowWithSubjectManager<any>;\n\n/**\n * Type alias for the keys of a given type T.\n */\nexport type SubjectKey<T> = keyof T & string;\n\n/**\n * AppBridge class provides a bridge for state management using RxJS BehaviorSubjects.\n * It manages a collection of BehaviorSubject instances, allowing for state updates,\n * retrievals, and subscriptions.\n *\n * @template T - The type of the subjects managed by AppBridge.\n */\nexport class AppBridge<T> {\n  private static instance: AppBridge<any>;\n\n  /**\n   * Private constructor to enforce the singleton pattern.\n   */\n  private constructor() {\n    if (!window._subjectManager) {\n      window._subjectManager = {} as SubjectEntries<T>;\n    }\n  }\n\n  /**\n   * Retrieves the singleton instance of the AppBridge.\n   * If the instance does not exist or the reset option is provided, a new instance is created.\n   *\n   * @template T - The type of the subjects managed by AppBridge.\n   * @param options - Options to configure the instance.\n   * @returns The singleton instance of AppBridge.\n   */\n  public static getInstance<T>(options: AppBridgeOptions = {}): AppBridge<T> {\n    if (!AppBridge.instance || options.reset) {\n      AppBridge.instance = new AppBridge<T>();\n    }\n    return AppBridge.instance;\n  }\n\n  /**\n   * Clears all BehaviorSubjects from the subject manager, completing and removing them.\n   *\n   * @example\n   * ```typescript\n   * const appBridge = AppBridge.getInstance<MyType>();\n   * appBridge.clearAllSubjects();\n   * ```\n   */\n  public clearAllSubjects(): void {\n    for (const subjectKey in window._subjectManager) {\n      if (window._subjectManager.hasOwnProperty(subjectKey)) {\n        window._subjectManager[subjectKey].complete();\n        delete window._subjectManager[subjectKey];\n      }\n    }\n  }\n\n  /**\n   * Retrieves a BehaviorSubject by its name, creating it if it does not exist.\n   *\n   * @template K - The key type of the subject.\n   * @param name - The name of the subject.\n   * @returns The BehaviorSubject instance.\n   *\n   * @example\n   * ```typescript\n   * const subject = appBridge.getSubject('mySubject');\n   * subject.subscribe(value => console.log(value));\n   * ```\n   */\n  public getSubject<K extends SubjectKey<T>>(\n    name: K,\n  ): BehaviorSubject<T[K] | null> {\n    if (!window._subjectManager[name]) {\n      window._subjectManager[name] = new BehaviorSubject<T[K] | null>(null);\n    }\n    return window._subjectManager[name];\n  }\n\n  /**\n   * Updates the value of a BehaviorSubject by its name, creating it if it does not exist.\n   *\n   * @template K - The key type of the subject.\n   * @param name - The name of the subject.\n   * @param newState - The new state to update.\n   *\n   * @example\n   * ```typescript\n   * appBridge.updateSubject('mySubject', { key: 'value' });\n   * ```\n   */\n  public updateSubject<K extends SubjectKey<T>>(name: K, newState: T[K]): void {\n    this.getSubject(name).next(newState);\n  }\n\n  /**\n   * Emits an error in the BehaviorSubject by its name.\n   *\n   * @template K - The key type of the subject.\n   * @param name - The name of the subject.\n   * @param error - The error to emit.\n   *\n   * @example\n   * ```typescript\n   * appBridge.errorSubject('mySubject', new Error('Something went wrong'));\n   * ```\n   */\n  public errorSubject<K extends SubjectKey<T>>(name: K, error: any): void {\n    this.getSubject(name).error(error);\n  }\n\n  /**\n   * Retrieves the current value of a BehaviorSubject by its name.\n   *\n   * @template K - The key type of the subject.\n   * @param name - The name of the subject.\n   * @returns The current value of the subject.\n   *\n   * @example\n   * ```typescript\n   * const currentValue = appBridge.getValue('mySubject');\n   * console.log(currentValue);\n   * ```\n   */\n  public getValue<K extends SubjectKey<T>>(name: K): T[K] | null {\n    return this.getSubject(name).getValue();\n  }\n\n  /**\n   * Subscribes to a BehaviorSubject by its name with an observer.\n   *\n   * @template K - The key type of the subject.\n   * @param name - The name of the subject.\n   * @param observer - The observer object with next, error, and complete callbacks.\n   * @returns The subscription to the subject.\n   *\n   * @example\n   * ```typescript\n   * const subscription = appBridge.subscribe('mySubject', {\n   *   next: value => console.log(value),\n   *   error: error => console.error(error),\n   *   complete: () => console.log('Completed')\n   * });\n   * ```\n   */\n  public subscribe<K extends SubjectKey<T>>(\n    name: K,\n    observer: {\n      next?: (value: T[K] | null) => void;\n      error?: (error: any) => void;\n      complete?: () => void;\n    },\n  ): Subscription {\n    return this.getSubject<K>(name).subscribe(observer);\n  }\n}\n\n/**\n * Factory function for creating or retrieving the singleton instance of the AppBridge class.\n *\n * @template T - The type of the subjects managed by AppBridge.\n * @param options - Options to configure the instance.\n * @returns The singleton instance of AppBridge.\n *\n * @example\n * ```typescript\n * const appBridge = createAppBridge<MyType>({ reset: true });\n * ```\n */\nexport function createAppBridge<T>(options: AppBridgeOptions = {}) {\n  return AppBridge.getInstance<T>(options);\n}\n","import angular from 'angular';\nimport { createAppBridge, SubjectKey } from './AppBridge.ts';\n\n/**\n * Function to create a generic AppBridgeService for Angular.\n *\n * @returns The Angular module with the AppBridgeService factory.\n */\nexport function createAppBridgeService<T>(applicationName: string) {\n  return angular.module(applicationName, []).factory('AppBridgeService', [\n    '$rootScope',\n    function ($rootScope: angular.IRootScopeService) {\n      const appBridge = createAppBridge<T>();\n      return {\n        getSubject: <K extends SubjectKey<T>>(name: K) =>\n          appBridge.getSubject<K>(name),\n        getValue: <K extends SubjectKey<T>>(name: K) =>\n          appBridge.getValue<K>(name),\n        updateSubject: <K extends SubjectKey<T>>(name: K, newState: T[K]) =>\n          appBridge.updateSubject<K>(name, newState),\n        subscribe: <K extends SubjectKey<T>>(\n          name: K,\n          next: (newState: T[K] | null) => void,\n        ) => {\n          const subscription = appBridge.subscribe(name, {\n            next: (newState) => {\n              $rootScope.$apply(() => {\n                next(newState);\n              });\n            },\n          });\n          return () => subscription.unsubscribe();\n        },\n      };\n    },\n  ]);\n}\n\nexport default createAppBridgeService;\n","import { useEffect, useState } from 'react';\nimport { createAppBridge } from './AppBridge.ts';\nimport type { SubjectKey } from './AppBridge.ts';\n\n/**\n * Custom hook that subscribes to a subject from the AppBridge and provides state management.\n *\n * @template T - The type of the subjects managed by AppBridge.\n * @param subjectName - The name of the subject to subscribe to.\n * @returns A tuple containing the current state of the subject and a function to update the state.\n *\n * @example\n * ```typescript\n * const [state, updateState] = useAppBridge<MyType>('mySubject');\n *\n * // Use the state\n * console.log(state);\n *\n * // Update the state\n * updateState({ key: 'value' });\n * ```\n */\nconst useAppBridge = <T>(subjectName: SubjectKey<T>) => {\n  const appBridge = createAppBridge<T>();\n  const [state, setState] = useState(appBridge.getValue(subjectName));\n\n  useEffect(() => {\n    const subscription = appBridge.subscribe(subjectName, {\n      next: (newState) => {\n        setState(newState);\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [subjectName]);\n\n  /**\n   * Updates the state of the subject.\n   *\n   * @param newState - The new state to set.\n   */\n  const updateState = (newState: T[SubjectKey<T>]) => {\n    appBridge.updateSubject(subjectName, newState);\n  };\n\n  return [state, updateState] as const;\n};\n\nexport default useAppBridge;\n"],"names":["BehaviorSubject","useState","useEffect"],"mappings":"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"}